---
services:
  nginx:
      build: 
        context: ./nginx
        dockerfile: Dockerfile
        args:
          - PROFILE=${COMPOSE_PROFILES:-dev}
      ports:
        - "80:80"
        - "443:443"
      volumes:
        - static_volume:/app/staticfiles:ro
        - media_volume:/app/media:ro
      depends_on:
        - backend
        - frontend
      restart: unless-stopped
      networks:
        - app-network
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
        - app-network

  backend:
    build: .
    ports:
      - "8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./backups:/app/backups
    networks:
        - app-network

  frontend:
      build: 
        context: ./frontend
        dockerfile: Dockerfile
        args:
          - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      restart: unless-stopped
      depends_on:
        - backend
      networks:
        - app-network
    
  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --origincert /run/secrets/cloudflare_origin_cert --credentials-file /run/secrets/cloudflare_tunnel_credentials --url http://nginx:80 run 3cc69b7d-b6bc-4708-90c3-fc77426e7391
    secrets:
      - cloudflare_tunnel_credentials
      - cloudflare_origin_cert
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - prod

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  app-network:
    driver: bridge

secrets:
  cloudflare_tunnel_credentials:
    file: ./cloudflare_tunnel_credentials.json
  cloudflare_origin_cert:
    file: ./cloudflare_origin_cert.pem
